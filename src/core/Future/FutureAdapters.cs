/*
	FutureAdapters.cs: Syntactic sugar for Futures
  
	Copyright (c) 2010 Alexander Corrado
  
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
 */

using System;
using System.Linq;
using System.Collections.Generic;

namespace Cirrus {
	
	public partial class Future {
		
		public static readonly Future Fulfilled;
		
		static Future ()
		{
			Fulfilled = new Future ();
			Fulfilled.status = FutureStatus.Fulfilled;
		}
		
		public Future WithTimeout (uint milliseconds)
		{
			return Future.ForAny (this, new TimeoutFuture (milliseconds));
		}
		
		/// <summary>
		/// Schedules a delegate to execute when this Future is fulfilled,
		///  and returns a new Future that encompasses the continuation.
		/// </summary>
		/// <param name='continuation'>
		/// The delegate to execute when this Future is fulfilled.
		/// </param>
		public Future Then (Action continuation)
		{
			this.Wait ();
			continuation ();
			return Future.Fulfilled;
		}
		
		public Future<R> Then<R> (Func<R> continuationWithResult)
		{
			this.Wait ();
			return continuationWithResult ();
		}
		
		/// <summary>
		/// Returns a Future that represents a given number of milliseconds from now.
		/// </summary>
		/// <remarks>
		/// This is a shortcut for creating an instance of TimeoutFuture.
		/// </remarks>
		/// <param name="milliseconds">
		/// The number of milliseconds after which the Future generated by this method
		/// should be fulfilled.
		/// </param>
		/// <returns>
		/// A <see cref="Future"/>
		/// </returns>
		public static Future MillisecondsFromNow (uint milliseconds)
		{
			return new TimeoutFuture (milliseconds);
		}
		
		/// <summary>
		/// A simple fiber spin wait.
		/// </summary>
		/// <remarks>
		/// The condition delegate should not execute any expensive operations, as it could
		/// potentially be executed many times in a tight loop.
		/// </remarks>
		/// <param name="condition">
		/// A <see cref="Func<System.Boolean>"/> that will return True to exit the spin wait.
		/// </param>
		/// <returns>
		/// A <see cref="Future"/>
		/// </returns>
		public static Future Until (Func<bool> condition)
		{
			while (!condition ())
				Thread.Yield ();
			
			return Future.Fulfilled;
		}
		
		// Future composing:
		
		public static CompositeFuture ForAny (params Future [] futures)
		{
			return new CompositeFuture (futures, FutureCompositors.WaitAny);	
		}
		
		public static CompositeFuture ForAll (params Future [] futures)
		{
			return new CompositeFuture (futures, FutureCompositors.WaitAll);	
		}
		
		public static CompositeFuture operator | (Future a, Future b)
		{
			return Future.ForAny (a, b);
		}
		
		public static CompositeFuture operator & (Future a, Future b)
		{
			return Future.ForAll (a, b);
		}
	}
	
	public partial class Future<T> {
		
		public Future Then (Action<T> continuation)
		{
			continuation (this.Wait ());
			return Future.Fulfilled;
		}
		
		public Future<R> Then<R> (Func<T,R> continuationWithResult)
		{
			return continuationWithResult (this.Wait ());
		}
		
		// Inspired by http://blogs.msdn.com/b/pfxteam/archive/2008/03/16/8272833.aspx
		public static Future<T> FromApm (Action<AsyncCallback> beginMethod, Func<IAsyncResult, T> endMethod)
		{
			var future = new Future<T> ();
			
			// We need to schedule this Future so that unhandled exceptions are dealt with..
			future.Schedule ();
			
			// Start async op..
			beginMethod (asyncResult => {
				try { future.Value = endMethod (asyncResult); }
				catch (Exception e) { future.Exception = e;   }
			});
			
			return future;
		}
		
		// Special case composition:
		
		public static Future<T> operator | (Future<T> a, Future<T> b)
		{
			var result = new Future<T> ();
            Action<Future> callback = null;
			
			callback = (Future f) => {
				f.OnComplete -= callback;

				// Lock result in case other future comes complete at the same time
				result.status_lock.EnterUpgradeableReadLock();
				try {
					if (result.Status != FutureStatus.Pending)
						return;

					if (f.Status == FutureStatus.Fulfilled) {
						result.Value = (f as Future<T>).Value;

					} else if (a.Exception != null && b.Exception != null) {

						result.Exception = new AggregateException(a.Exception, b.Exception);
					}
					
				} finally {
					result.status_lock.ExitUpgradeableReadLock();
				}
			};
		
			a.status_lock.EnterReadLock ();
			try {
				a.OnComplete += callback;
				if (a.Status != FutureStatus.Pending)
					callback (a);
			}
			finally {
				a.status_lock.ExitReadLock ();
			}
			
			if (result.Status != FutureStatus.Pending)
				return result;
			
			b.status_lock.EnterReadLock ();
			try {
				b.OnComplete += callback;
				if (b.Status != FutureStatus.Pending)
					callback (b);
			}
			finally {
				b.status_lock.ExitReadLock ();
			}
			
			return result;
		}
		
		// This allows any T to be cast to an instantly-fulfilled Future<T>
		public static implicit operator Future<T>(T returned)
		{
			return new Future<T> { Value = returned };
		}
	}
}