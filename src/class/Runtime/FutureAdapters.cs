/*
	FutureAdapters.cs: Syntactic sugar for Futures
  
	Copyright (c) 2010 Alexander Corrado
  
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
 */

using System;
using System.Collections.Generic;

namespace Cirrus {
	
	public partial class Future {
		
		/// <summary>
		/// Returns a Future that represents a given number of milliseconds from now.
		/// </summary>
		/// <remarks>
		/// If you only need to wait a certain amount of time, calling Thread.Sleep is more efficient
		/// than generating a Future with this method and awaiting it.
		/// </remarks>
		/// <param name="milliseconds">
		/// The number of milliseconds after which the Future generated by this method
		/// should be fulfilled.
		/// </param>
		/// <returns>
		/// A <see cref="Future"/>
		/// </returns>
		public static Future FromNow (uint milliseconds)
		{
			Thread.Sleep (milliseconds);
			return null;
		}
		
		public static CompositeFuture ForAny (params Future [] futures)
		{
			return new CompositeFuture (futures, FutureCompositors.WaitAny);	
		}
		
		public static CompositeFuture ForAll (params Future [] futures)
		{
			return new CompositeFuture (futures, FutureCompositors.WaitAll);	
		}
	}
	
	public partial class Future<T> {
		
		// Inspired by http://blogs.msdn.com/b/pfxteam/archive/2008/03/16/8272833.aspx
		public static Future<T> FromApm (Action<AsyncCallback> beginMethod, Func<IAsyncResult, T> endMethod)
		{
			var future = new Future<T> ();
			
			// We need to schedule this Future so that unhandled exceptions are dealt with..
			Thread.Current.ScheduleFiber (future);
			
			// Start async op..
			beginMethod (asyncResult => {
				try { future.Value = endMethod (asyncResult); }
				catch (Exception e) { future.Exception = e;   }
			});
			
			return future;
		}
		
		// This allows any T to be cast to an instantly-fulfilled Future<T>
		public static implicit operator Future<T>(T returned)
		{
			return new Future<T> { Value = returned };
		}
	}
}